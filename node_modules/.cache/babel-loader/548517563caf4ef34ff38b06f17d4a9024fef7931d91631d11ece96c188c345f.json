{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, ref } from 'vue';\nimport { Line } from 'vue-chartjs';\nimport { Chart as ChartJS, Title, Tooltip, Legend, LinearScale, CategoryScale, PointElement, LineElement } from 'chart.js';\nChartJS.register(Title, Tooltip, Legend, LineElement, CategoryScale, LinearScale, PointElement);\nexport default defineComponent({\n  name: 'CodingChallenge',\n  components: {\n    LineChart: {\n      extends: Line,\n      props: ['chartData', 'options'],\n      mounted() {\n        this.renderChart(this.chartData, this.options);\n      }\n    }\n  },\n  setup() {\n    const options = ref([{\n      type: 'call',\n      strikePrice: 0,\n      premium: 0\n    }]);\n    const graphData = ref(null);\n    const chartOptions = {\n      responsive: true,\n      maintainAspectRatio: false\n    };\n    let maxProfit = null;\n    let maxLoss = null;\n    const breakEvenPoints = [];\n    const addOption = () => {\n      if (options.value.length < 4) {\n        options.value.push({\n          type: 'call',\n          strikePrice: 0,\n          premium: 0\n        });\n      }\n    };\n    const generateGraph = () => {\n      const priceRange = Array.from({\n        length: 200\n      }, (_, i) => i * 5);\n      const profits = priceRange.map(price => calculateTotalProfit(price));\n      maxProfit = Math.max(...profits);\n      maxLoss = Math.min(...profits);\n      breakEvenPoints.length = 0;\n      breakEvenPoints.push(...findBreakEvenPoints(priceRange, profits));\n      graphData.value = {\n        labels: priceRange,\n        datasets: [{\n          label: 'Profit/Loss',\n          backgroundColor: 'rgba(54, 162, 235, 0.2)',\n          borderColor: 'rgba(54, 162, 235, 1)',\n          data: profits,\n          fill: true\n        }]\n      };\n    };\n    const calculateTotalProfit = price => {\n      return options.value.reduce((total, option) => {\n        const {\n          type,\n          strikePrice,\n          premium\n        } = option;\n        if (type === 'call') {\n          return total + Math.max(0, price - strikePrice) - premium;\n        } else {\n          return total + Math.max(0, strikePrice - price) - premium;\n        }\n      }, 0);\n    };\n    const findBreakEvenPoints = (prices, profits) => {\n      const breakEvenPoints = [];\n      for (let i = 1; i < prices.length; i++) {\n        if (profits[i - 1] * profits[i] < 0) {\n          breakEvenPoints.push(prices[i]);\n        }\n      }\n      return breakEvenPoints;\n    };\n    return {\n      options,\n      graphData,\n      chartOptions,\n      maxProfit,\n      maxLoss,\n      breakEvenPoints,\n      addOption,\n      generateGraph\n    };\n  }\n});","map":{"version":3,"names":["defineComponent","ref","Line","Chart","ChartJS","Title","Tooltip","Legend","LinearScale","CategoryScale","PointElement","LineElement","register","name","components","LineChart","extends","props","mounted","renderChart","chartData","options","setup","type","strikePrice","premium","graphData","chartOptions","responsive","maintainAspectRatio","maxProfit","maxLoss","breakEvenPoints","addOption","value","length","push","generateGraph","priceRange","Array","from","_","i","profits","map","price","calculateTotalProfit","Math","max","min","findBreakEvenPoints","labels","datasets","label","backgroundColor","borderColor","data","fill","reduce","total","option","prices"],"sources":["src/components/CodingChallenge.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Options Strategy Risk and Reward Analysis</h1>\n    <form @submit.prevent=\"generateGraph\">\n      <div v-for=\"(option, index) in options\" :key=\"index\" class=\"option-input\">\n        <label>\n          Option Type:\n          <select v-model=\"option.type\">\n            <option value=\"call\">Call</option>\n            <option value=\"put\">Put</option>\n          </select>\n        </label>\n        <label>\n          Strike Price:\n          <input type=\"number\" v-model.number=\"option.strikePrice\" required>\n        </label>\n        <label>\n          Premium:\n          <input type=\"number\" v-model.number=\"option.premium\" required>\n        </label>\n      </div>\n      <button type=\"button\" @click=\"addOption\">Add Option</button>\n      <button type=\"submit\">Generate Graph</button>\n    </form>\n    <div v-if=\"graphData\">\n      <line-chart :chart-data=\"graphData\" :options=\"chartOptions\"></line-chart>\n      <p>Max Profit: {{ maxProfit }}</p>\n      <p>Max Loss: {{ maxLoss }}</p>\n      <p>Break Even Points: {{ breakEvenPoints.join(', ') }}</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { defineComponent, ref } from 'vue';\nimport { Line } from 'vue-chartjs';\nimport {\n  Chart as ChartJS,\n  Title,\n  Tooltip,\n  Legend,\n  LinearScale,\n  CategoryScale,\n  PointElement,\n  LineElement,\n} from 'chart.js';\n\nChartJS.register(\n  Title,\n  Tooltip,\n  Legend,\n  LineElement,\n  CategoryScale,\n  LinearScale,\n  PointElement\n);\n\nexport default defineComponent({\n  name: 'CodingChallenge',\n  components: {\n    LineChart: {\n      extends: Line,\n      props: ['chartData', 'options'],\n      mounted() {\n        this.renderChart(this.chartData, this.options);\n      },\n    },\n  },\n  setup() {\n    const options = ref([{ type: 'call', strikePrice: 0, premium: 0 }]);\n    const graphData = ref(null);\n    const chartOptions = {\n      responsive: true,\n      maintainAspectRatio: false,\n    };\n\n    let maxProfit = null;\n    let maxLoss = null;\n    const breakEvenPoints = [];\n\n    const addOption = () => {\n      if (options.value.length < 4) {\n        options.value.push({ type: 'call', strikePrice: 0, premium: 0 });\n      }\n    };\n\n    const generateGraph = () => {\n      const priceRange = Array.from({ length: 200 }, (_, i) => i * 5);\n      const profits = priceRange.map(price => calculateTotalProfit(price));\n      maxProfit = Math.max(...profits);\n      maxLoss = Math.min(...profits);\n      breakEvenPoints.length = 0;\n      breakEvenPoints.push(...findBreakEvenPoints(priceRange, profits));\n\n      graphData.value = {\n        labels: priceRange,\n        datasets: [\n          {\n            label: 'Profit/Loss',\n            backgroundColor: 'rgba(54, 162, 235, 0.2)',\n            borderColor: 'rgba(54, 162, 235, 1)',\n            data: profits,\n            fill: true,\n          },\n        ],\n      };\n    };\n\n    const calculateTotalProfit = (price) => {\n      return options.value.reduce((total, option) => {\n        const { type, strikePrice, premium } = option;\n        if (type === 'call') {\n          return total + Math.max(0, price - strikePrice) - premium;\n        } else {\n          return total + Math.max(0, strikePrice - price) - premium;\n        }\n      }, 0);\n    };\n\n    const findBreakEvenPoints = (prices, profits) => {\n      const breakEvenPoints = [];\n      for (let i = 1; i < prices.length; i++) {\n        if (profits[i - 1] * profits[i] < 0) {\n          breakEvenPoints.push(prices[i]);\n        }\n      }\n      return breakEvenPoints;\n    };\n\n    return {\n      options,\n      graphData,\n      chartOptions,\n      maxProfit,\n      maxLoss,\n      breakEvenPoints,\n      addOption,\n      generateGraph,\n    };\n  },\n});\n</script>\n\n<style scoped>\n.option-input {\n  margin-bottom: 1rem;\n}\n</style>\n"],"mappings":";AAkCA,SAAAA,eAAA,EAAAC,GAAA;AACA,SAAAC,IAAA;AACA,SACAC,KAAA,IAAAC,OAAA,EACAC,KAAA,EACAC,OAAA,EACAC,MAAA,EACAC,WAAA,EACAC,aAAA,EACAC,YAAA,EACAC,WAAA,QACA;AAEAP,OAAA,CAAAQ,QAAA,CACAP,KAAA,EACAC,OAAA,EACAC,MAAA,EACAI,WAAA,EACAF,aAAA,EACAD,WAAA,EACAE,YACA;AAEA,eAAAV,eAAA;EACAa,IAAA;EACAC,UAAA;IACAC,SAAA;MACAC,OAAA,EAAAd,IAAA;MACAe,KAAA;MACAC,QAAA;QACA,KAAAC,WAAA,MAAAC,SAAA,OAAAC,OAAA;MACA;IACA;EACA;EACAC,MAAA;IACA,MAAAD,OAAA,GAAApB,GAAA;MAAAsB,IAAA;MAAAC,WAAA;MAAAC,OAAA;IAAA;IACA,MAAAC,SAAA,GAAAzB,GAAA;IACA,MAAA0B,YAAA;MACAC,UAAA;MACAC,mBAAA;IACA;IAEA,IAAAC,SAAA;IACA,IAAAC,OAAA;IACA,MAAAC,eAAA;IAEA,MAAAC,SAAA,GAAAA,CAAA;MACA,IAAAZ,OAAA,CAAAa,KAAA,CAAAC,MAAA;QACAd,OAAA,CAAAa,KAAA,CAAAE,IAAA;UAAAb,IAAA;UAAAC,WAAA;UAAAC,OAAA;QAAA;MACA;IACA;IAEA,MAAAY,aAAA,GAAAA,CAAA;MACA,MAAAC,UAAA,GAAAC,KAAA,CAAAC,IAAA;QAAAL,MAAA;MAAA,IAAAM,CAAA,EAAAC,CAAA,KAAAA,CAAA;MACA,MAAAC,OAAA,GAAAL,UAAA,CAAAM,GAAA,CAAAC,KAAA,IAAAC,oBAAA,CAAAD,KAAA;MACAf,SAAA,GAAAiB,IAAA,CAAAC,GAAA,IAAAL,OAAA;MACAZ,OAAA,GAAAgB,IAAA,CAAAE,GAAA,IAAAN,OAAA;MACAX,eAAA,CAAAG,MAAA;MACAH,eAAA,CAAAI,IAAA,IAAAc,mBAAA,CAAAZ,UAAA,EAAAK,OAAA;MAEAjB,SAAA,CAAAQ,KAAA;QACAiB,MAAA,EAAAb,UAAA;QACAc,QAAA,GACA;UACAC,KAAA;UACAC,eAAA;UACAC,WAAA;UACAC,IAAA,EAAAb,OAAA;UACAc,IAAA;QACA;MAEA;IACA;IAEA,MAAAX,oBAAA,GAAAD,KAAA;MACA,OAAAxB,OAAA,CAAAa,KAAA,CAAAwB,MAAA,EAAAC,KAAA,EAAAC,MAAA;QACA;UAAArC,IAAA;UAAAC,WAAA;UAAAC;QAAA,IAAAmC,MAAA;QACA,IAAArC,IAAA;UACA,OAAAoC,KAAA,GAAAZ,IAAA,CAAAC,GAAA,IAAAH,KAAA,GAAArB,WAAA,IAAAC,OAAA;QACA;UACA,OAAAkC,KAAA,GAAAZ,IAAA,CAAAC,GAAA,IAAAxB,WAAA,GAAAqB,KAAA,IAAApB,OAAA;QACA;MACA;IACA;IAEA,MAAAyB,mBAAA,GAAAA,CAAAW,MAAA,EAAAlB,OAAA;MACA,MAAAX,eAAA;MACA,SAAAU,CAAA,MAAAA,CAAA,GAAAmB,MAAA,CAAA1B,MAAA,EAAAO,CAAA;QACA,IAAAC,OAAA,CAAAD,CAAA,QAAAC,OAAA,CAAAD,CAAA;UACAV,eAAA,CAAAI,IAAA,CAAAyB,MAAA,CAAAnB,CAAA;QACA;MACA;MACA,OAAAV,eAAA;IACA;IAEA;MACAX,OAAA;MACAK,SAAA;MACAC,YAAA;MACAG,SAAA;MACAC,OAAA;MACAC,eAAA;MACAC,SAAA;MACAI;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}