{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'CodingChallenge',\n  props: {\n    optionsData: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      maxProfit: 0,\n      maxLoss: 0,\n      breakEvenPoints: []\n    };\n  },\n  mounted() {\n    this.calculateRiskReward();\n  },\n  methods: {\n    calculateRiskReward() {\n      // Implement logic to calculate max profit, max loss, and break even points\n      // Example calculations (replace with actual logic based on your options strategy)\n      let totalPremiumReceived = 0;\n      let totalPremiumPaid = 0;\n      this.optionsData.forEach(option => {\n        if (option.longShort === 'long') {\n          totalPremiumPaid += option.ask;\n        } else if (option.longShort === 'short') {\n          totalPremiumReceived += option.bid;\n        }\n      });\n      this.maxProfit = totalPremiumReceived;\n      this.maxLoss = totalPremiumPaid;\n\n      // Example break even point calculation (replace with your strategy logic)\n      this.breakEvenPoints = [this.optionsData[0].strikePrice - this.optionsData[0].ask, this.optionsData[0].strikePrice + this.optionsData[0].bid];\n\n      // Render the graph after calculations (you can use a graphing library like Chart.js or plain canvas)\n      this.renderGraph();\n    },\n    renderGraph() {\n      // Example using plain canvas API for a simple line graph:\n      const canvas = this.$refs.strategyGraph;\n      const ctx = canvas.getContext('2d');\n\n      // Example data (replace with your actual logic)\n      const data = this.calculateProfitLoss();\n\n      // Example: Plotting a simple line graph\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.beginPath();\n      ctx.moveTo(0, canvas.height / 2); // Starting point\n      data.forEach((point, index) => {\n        const x = (index + 1) * (canvas.width / data.length);\n        const y = canvas.height / 2 - point * 10; // Scale for demo purpose\n        ctx.lineTo(x, y);\n      });\n      ctx.stroke();\n    },\n    calculateProfitLoss() {\n      // Example logic to calculate profit/loss at different prices\n      // Replace with your actual calculation based on optionsData\n      const underlyingPrices = [100, 110, 120, 130]; // Example underlying prices\n      const profitLoss = [];\n      underlyingPrices.forEach(price => {\n        // Example profit/loss calculation (replace with your strategy logic)\n        const profit = price - 105; // Example: Strike price 105\n        profitLoss.push(profit);\n      });\n      return profitLoss;\n    }\n  }\n};","map":{"version":3,"names":["name","props","optionsData","type","Array","required","data","maxProfit","maxLoss","breakEvenPoints","mounted","calculateRiskReward","methods","totalPremiumReceived","totalPremiumPaid","forEach","option","longShort","ask","bid","strikePrice","renderGraph","canvas","$refs","strategyGraph","ctx","getContext","calculateProfitLoss","clearRect","width","height","beginPath","moveTo","point","index","x","length","y","lineTo","stroke","underlyingPrices","profitLoss","price","profit","push"],"sources":["src/components/CodingChallenge.vue"],"sourcesContent":["<template>\n  <div class=\"coding-challenge\">\n    <h2>Options Strategy Risk & Reward Analysis</h2>\n    <div class=\"graph-container\">\n      <canvas ref=\"strategyGraph\"></canvas>\n    </div>\n    <div class=\"strategy-details\">\n      <h3>Strategy Details</h3>\n      <ul>\n        <li v-for=\"(option, index) in optionsData\" :key=\"index\">\n          Strike Price: {{ option.strikePrice }}, Type: {{ option.type }},\n          Bid: {{ option.bid }}, Ask: {{ option.ask }}, Long/Short: {{ option.longShort }}\n        </li>\n      </ul>\n      <p><strong>Max Profit:</strong> {{ maxProfit }}</p>\n      <p><strong>Max Loss:</strong> {{ maxLoss }}</p>\n      <p><strong>Break Even Points:</strong></p>\n      <ul>\n        <li v-for=\"(breakEven, index) in breakEvenPoints\" :key=\"index\">\n          {{ breakEven }}\n        </li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'CodingChallenge',\n  props: {\n    optionsData: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      maxProfit: 0,\n      maxLoss: 0,\n      breakEvenPoints: []\n    };\n  },\n  mounted() {\n    this.calculateRiskReward();\n  },\n  methods: {\n    calculateRiskReward() {\n      // Implement logic to calculate max profit, max loss, and break even points\n      // Example calculations (replace with actual logic based on your options strategy)\n      let totalPremiumReceived = 0;\n      let totalPremiumPaid = 0;\n\n      this.optionsData.forEach(option => {\n        if (option.longShort === 'long') {\n          totalPremiumPaid += option.ask;\n        } else if (option.longShort === 'short') {\n          totalPremiumReceived += option.bid;\n        }\n      });\n\n      this.maxProfit = totalPremiumReceived;\n      this.maxLoss = totalPremiumPaid;\n\n      // Example break even point calculation (replace with your strategy logic)\n      this.breakEvenPoints = [\n        this.optionsData[0].strikePrice - this.optionsData[0].ask,\n        this.optionsData[0].strikePrice + this.optionsData[0].bid\n      ];\n\n      // Render the graph after calculations (you can use a graphing library like Chart.js or plain canvas)\n      this.renderGraph();\n    },\n    renderGraph() {\n      // Example using plain canvas API for a simple line graph:\n      const canvas = this.$refs.strategyGraph;\n      const ctx = canvas.getContext('2d');\n\n      // Example data (replace with your actual logic)\n      const data = this.calculateProfitLoss();\n\n      // Example: Plotting a simple line graph\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.beginPath();\n      ctx.moveTo(0, canvas.height / 2); // Starting point\n      data.forEach((point, index) => {\n        const x = (index + 1) * (canvas.width / data.length);\n        const y = canvas.height / 2 - point * 10; // Scale for demo purpose\n        ctx.lineTo(x, y);\n      });\n      ctx.stroke();\n    },\n    calculateProfitLoss() {\n      // Example logic to calculate profit/loss at different prices\n      // Replace with your actual calculation based on optionsData\n      const underlyingPrices = [100, 110, 120, 130]; // Example underlying prices\n      const profitLoss = [];\n\n      underlyingPrices.forEach(price => {\n        // Example profit/loss calculation (replace with your strategy logic)\n        const profit = price - 105; // Example: Strike price 105\n        profitLoss.push(profit);\n      });\n\n      return profitLoss;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.coding-challenge {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.graph-container {\n  margin-bottom: 20px;\n}\n\n.strategy-details {\n  border-top: 1px solid #ccc;\n  padding-top: 20px;\n  margin-top: 20px;\n}\n\n.strategy-details h3 {\n  margin-bottom: 10px;\n}\n</style>\n"],"mappings":";AA2BA;EACAA,IAAA;EACAC,KAAA;IACAC,WAAA;MACAC,IAAA,EAAAC,KAAA;MACAC,QAAA;IACA;EACA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,OAAA;MACAC,eAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,mBAAA;EACA;EACAC,OAAA;IACAD,oBAAA;MACA;MACA;MACA,IAAAE,oBAAA;MACA,IAAAC,gBAAA;MAEA,KAAAZ,WAAA,CAAAa,OAAA,CAAAC,MAAA;QACA,IAAAA,MAAA,CAAAC,SAAA;UACAH,gBAAA,IAAAE,MAAA,CAAAE,GAAA;QACA,WAAAF,MAAA,CAAAC,SAAA;UACAJ,oBAAA,IAAAG,MAAA,CAAAG,GAAA;QACA;MACA;MAEA,KAAAZ,SAAA,GAAAM,oBAAA;MACA,KAAAL,OAAA,GAAAM,gBAAA;;MAEA;MACA,KAAAL,eAAA,IACA,KAAAP,WAAA,IAAAkB,WAAA,QAAAlB,WAAA,IAAAgB,GAAA,EACA,KAAAhB,WAAA,IAAAkB,WAAA,QAAAlB,WAAA,IAAAiB,GAAA,CACA;;MAEA;MACA,KAAAE,WAAA;IACA;IACAA,YAAA;MACA;MACA,MAAAC,MAAA,QAAAC,KAAA,CAAAC,aAAA;MACA,MAAAC,GAAA,GAAAH,MAAA,CAAAI,UAAA;;MAEA;MACA,MAAApB,IAAA,QAAAqB,mBAAA;;MAEA;MACAF,GAAA,CAAAG,SAAA,OAAAN,MAAA,CAAAO,KAAA,EAAAP,MAAA,CAAAQ,MAAA;MACAL,GAAA,CAAAM,SAAA;MACAN,GAAA,CAAAO,MAAA,IAAAV,MAAA,CAAAQ,MAAA;MACAxB,IAAA,CAAAS,OAAA,EAAAkB,KAAA,EAAAC,KAAA;QACA,MAAAC,CAAA,IAAAD,KAAA,SAAAZ,MAAA,CAAAO,KAAA,GAAAvB,IAAA,CAAA8B,MAAA;QACA,MAAAC,CAAA,GAAAf,MAAA,CAAAQ,MAAA,OAAAG,KAAA;QACAR,GAAA,CAAAa,MAAA,CAAAH,CAAA,EAAAE,CAAA;MACA;MACAZ,GAAA,CAAAc,MAAA;IACA;IACAZ,oBAAA;MACA;MACA;MACA,MAAAa,gBAAA;MACA,MAAAC,UAAA;MAEAD,gBAAA,CAAAzB,OAAA,CAAA2B,KAAA;QACA;QACA,MAAAC,MAAA,GAAAD,KAAA;QACAD,UAAA,CAAAG,IAAA,CAAAD,MAAA;MACA;MAEA,OAAAF,UAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}